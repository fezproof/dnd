scalar Prose

# interface Entry {
# 	id: ID!
# 	name: String!
# 	content: Content!
# 	campaign: Campaign
# }

# enum PlaceType {
# 	BUILDING
# 	VILLAGE
# 	TOWN
# 	CITY
# 	COUNTRY
# 	POINT_OF_INTEREST
# 	LANDMARK
# }

# type Place implements Entry {
# 	id: ID!
# 	name: String!
# 	content: Content!
# 	campaign: Campaign
# 	type: PlaceType
# }

# type Organisation implements Entry {
# 	id: ID!
# 	name: String!
# 	content: Content!
# 	campaign: Campaign
# 	leader: [Character!]
# 	knownMembers: [Character]
# }

# type Character implements Entry {
# 	id: ID!
# 	name: String!
# 	content: Content!
# 	campaign: Campaign
# 	organisation: Organisation
# }

interface Node {
	id: ID! # Filepath of the post
	content: Content
}

type Image {
	filePath: String!
	src: String
}

type Content {
	excerpt: Prose
	prose: Prose!
	raw: String!
}

type Log implements Node {
	id: ID!
	date: String
	link: String
	name: String
	content: Content

	image(width: Int, height: Int): String

	campaign: Campaign!
}

type Player implements Node {
	id: ID!
	link: String
	name: String
	content: Content
	image(width: Int, height: Int): String
}

type Campaign implements Node {
	id: ID!
	content: Content
	link: String
	name: String
	font: ID
	image: Image
	players: [Player!]
	logs: [Log!]
}

type Query {
	campaigns: [Campaign]
	campaign(id: ID!): Campaign
	log(id: ID!, campaignId: ID!): Log
	player(id: ID!): Player
	players: [Player]
	node(id: ID!): Node
}
